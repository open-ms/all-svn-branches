# -*- mode:shell-script; tab-width:2 -*-
# vi: set ts=2:
#
# --------------------------------------------------------------------------
#                   OpenMS Mass Spectrometry Framework
# --------------------------------------------------------------------------
#  Copyright (C) 2003-2010 -- Oliver Kohlbacher, Knut Reinert
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# --------------------------------------------------------------------------
# $Maintainer: Clemens Groepl $
# $Authors: $
# --------------------------------------------------------------------------

############################################################
#  PURPOSE
############################################################
#
# This file is an attempt to share some bash functions which have been
# developed by the programmers of OpenMS over the years.  We hope that such a
# collection will be useful, especially for newbies.  Further contributions
# are welcome (see below).


############################################################
#  INSTALLATION
############################################################
#
# If you want to try this out, just type the following at a bash prompt:
#
#   source bashrc.OpenMS
#
# and the functions will be available for this session.  That's it!
#
# To automate this:
# You should have a ".bashrc" file in your home directory.
# (If not, create an empty file, e.g. like this: cd ${HOME}; touch .bashrc)
# Add this line somewhere near the end:
#   source ${HOME}/OpenMS/source/config/tools/bashrc.OpenMS
# You can also define an alias:
#   alias sob='source ${HOME}/OpenMS/source/config/tools/bashrc.OpenMS'

############################################################
#  HOW TO GET HELP
############################################################
#
# =>  See the definition of function OpenMS_help below.


############################################################
#  SPECIAL NOTE TO OPENMS DEVELOPERS
############################################################
#
# Please send any suggestions or improvements to the maintainer (which see
# above).  Even if you have developer rights at Sourceforge svn, please do not
# check in _incompatible_ changes, as these might harm other developers which
# are using this for their daily work.  Avoid tabs in this file.
# If you add a function, include it in OpenMS_help and OpenMS_help_verbose.


# [end of info]

# TODO
# combination of xargs with safer_sed, elc, etc., does not work



############################################################################
# -------------------------------------------------------------------------#
# ...........................  Implementation  ............................#
# -------------------------------------------------------------------------#
############################################################################

echo -n "reading bashrc.OpenMS ..."

# Very few essential environment variable settings...

# tab width 2 for less
export PAGER=less
export LESS=${LESS}' -x 2'

export GREP_OPTIONS='--color'
export PATCH_VERSION_CONTROL=numbered
export VERSION_CONTROL=numbered

set noclobber

# file completion 
set filec


############################################################
#  INTERNAL (little helpers used by these functions)
############################################################

# The variable OpenMS_do_help_condition will be eval'ed.  Note that $1 might not
# exist, hence the X suffix to keep the test syntactically correct.
OpenMS_do_help_condition='[ ${1}X == --helpX ]'

# These get a leading _ so that they won't clutter autocompletion when you type OpenMS <tab>
_OpenMS_where_defined_message="[ This is a bash function defined in bashrc.OpenMS ]"
function _OpenMS_where_defined()
{
    echo
    echo $_OpenMS_where_defined_message
}


############################################################
#  DIAGNOSTICS (no remaining effects)
############################################################

function OpenMS_help()
{
    echo
    echo " OpenMS_help is the built-in help for bashrc.OpenMS"
    echo "    "
    echo " -  To get a list of all functions with built-in help:  OpenMS_help_verbose"
    echo "    "
    echo " -  Each function will print a short usage info"
    echo "    when called with the argument \"--help\"."
    echo "    "
    echo " -  The definition of any bash function can be displayed"
    echo "    using the bash command: \"type name_of_function\"".
    echo "    "
    echo " Summary of functions:"
    echo "    "
    echo " -  DIAGNOSTICS (no remaining effects):"
    echo "    OpenMS_help      OpenMS_help_verbose"
    echo "    chop             chop_verbose"
    echo "    path             ldli"
    echo "    I                D Date           dusn   "
    echo "    find_sources     grep_sources     find_executables"
    echo "    svn_diff         svn_status_files"
    echo "    "
    echo " -  ENVIRONMENT (setting PATH and LD_LIBRARY_PATH):"
    echo "    OpenMS_develop   OpenMS_release   OpenMS_directory"
    echo "    prefix_PATH                postfix_PATH" 
    echo "    prefix_LD_LIBRARY_PATH     postfix_LD_LIBRARY_PATH"
    echo "    prompt"
    echo "    "
    echo " -  MOVING AROUND (change working directory):"
    echo "    goi    gos    cwd"
    echo "    godev  gorel"
    echo "    "
    echo " -  WORKING (actually do something):"
    echo "    backup           safer_sed"
    echo "    elc emacsclient_line_column"
    echo "    mogrify_margin   postscript_boundingbox"
    _OpenMS_where_defined
}

#-----------------------------------------------------------

function OpenMS_help_verbose ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "List all * functions"
        _OpenMS_where_defined
    else
        # for f in `grep function\ * bashrc.OpenMS | grep -o [A-Za-z_]* | grep -v _OpenMS_where_defined | sort`;
        for f in OpenMS_help_verbose OpenMS_help backup chop chop_verbose cwd Date OpenMS_develop OpenMS_directory dusn emacsclient_line_column find_executables find_sources godev goi gorel gos grep_sources I ldli mogrify_margin path postfix_LD_LIBRARY_PATH postfix_PATH prefix_LD_LIBRARY_PATH prefix_PATH postscript_boundingbox prompt OpenMS_release safer_sed svn_diff svn_status_files;
        do
            echo "#----------------------------------------------------------------------"
            echo ""
            if [ $1_ != "nocolor_" ]; then
                echo -e '\033[1;31m'${f}'\033[0;0m':
            else
                echo -e ${f}:
            fi
            echo ""
            $f --help | grep -v bashrc.OpenMS
            
        done
        _OpenMS_where_defined
        if [ $1_ != "nocolor_" ]; then
            echo "###    If the output above looks scrambled, try this:   OpenMS_help_verbose nocolor "
        fi
    fi
}

#-----------------------------------------------------------

function chop()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "If you have a list of strings separated by ':' characters"
        echo "(such as the PATH or LD_LIBRARY_PATH variables)"
        echo "this will chop this by replacing : with line breaks."
        _OpenMS_where_defined
    else
        sed s/:/\\n/g -
    fi
}

#-----------------------------------------------------------

function chop_verbose()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "'chop_verbose' is like 'chop' but more verbose,"
        echo "so that empty strings can be identified easily."
        _OpenMS_where_defined
    else
        echo '#BEGIN'
        chop | sed 's/^/\t/' -
        echo '#END'
    fi
}

#-----------------------------------------------------------

function path()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Print the PATH environment variable."
        _OpenMS_where_defined
    else
        echo $PATH | chop
    fi
}

#-----------------------------------------------------------

function ldli()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Print the LD_LIBRARY_PATH environment variable."
        _OpenMS_where_defined
    else
        echo $LD_LIBRARY_PATH | chop
    fi
}

#-----------------------------------------------------------

function I()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Tell me who and where I am."
        echo "(Useful if you are working on a remote host with a different login.)"
        _OpenMS_where_defined
    else
        echo You are `whoami` on `hostname`.
    fi
}

#-----------------------------------------------------------

function D ()
{
    Date $*
}

function Date()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Print current date and time."
        echo "\"D\" is an abbreviation for \"Date\"."
        echo "Uses the C locale for consistency."
        echo "Precision is in microseconds, which should be unique even in looping scripts."
        echo "=>  See also: safer_sed"
        _OpenMS_where_defined
    else
        LC_ALL=C date +%Y-%m-%d-%a-%H-%M-%S-%6N
    fi
}

#-----------------------------------------------------------

function dusn()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Print disk usage, sorted numerically."
        echo "Actually, it does:  du \$* | sort -n"
        _OpenMS_where_defined
    else
        du $* | sort -n 
    fi
}

#-----------------------------------------------------------

function find_executables()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Find files with executable permissions (but not directories)."
        _OpenMS_where_defined
    else
        find $@ -perm /u+x -and -not -type d | sort
    fi
}

#-----------------------------------------------------------

function find_sources()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Find C++ source files."
        echo "Searches from the current directory.  You can append further options."
        echo "=>  See also: grep_sources, info find"
        _OpenMS_where_defined
    else
        find . \( -name \*.[Hh] -o -name \*.[Cc] -o -name \*.[Hh][Pp][Pp] -o -name \*.[Cc][Pp][Pp] -o -name \*.[Hh][Hh] -o -name \*.[Cc][Cc] \) $@
    fi
}

#-----------------------------------------------------------

function grep_sources()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Grep C++ source files."
        echo "Searches from the current directory.  You can append further grep options (like -i -n -l etc.)."
        echo "=>  See also: find_sources, info xargs, info grep"
        _OpenMS_where_defined
    else
        find_sources -print0 | xargs -0 grep --color -n "$@"
    fi
}

#-----------------------------------------------------------

function svn_diff()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Like 'svn diff', but using colordiff as external diff program, with suitable options."
        _OpenMS_where_defined
    else
        svn diff --diff-cmd colordiff -x -uwB $*
    fi
}

#-----------------------------------------------------------

function svn_status_files
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Like 'svn status', but remove first seven columns so that only file names remain."
        echo "So you might further work on these files using xargs."
        echo "=>  See also: info xargs"
        _OpenMS_where_defined
    else
        svn status $@ | sed 's/^.......//' | sort
    fi
}

#-----------------------------------------------------------



############################################################
#  ENVIRONMENT (setting PATH and LD_LIBRARY_PATH)
############################################################


function prefix_PATH ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Add a directory at the begin of the PATH environment variable."
        echo "Also checks that the argument exists and is a directory."
        _OpenMS_where_defined
    else
        if [ $1_ != _ ] && [ -d $1 ]; then
            export PATH=$1:$PATH
        else
            echo "'$1' is not a directory"
        fi
    fi
}

function postfix_PATH ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Add a directory at the end of the PATH environment variable."
        echo "Also checks that the argument exists and is a directory."
        _OpenMS_where_defined
    else
        if [ $1_ != _ ] && [ -d $1 ]; then
            export PATH=$PATH:$1
        else
            echo "'$1' is not a directory"
        fi
    fi
}

function prefix_LD_LIBRARY_PATH ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Add a directory at the begin of the LD_LIBRARY_PATH environment variable."
        echo "Also checks that the argument exists and is a directory."
        _OpenMS_where_defined
    else
        if [ $1_ != _ ] && [ -d $1 ]; then
            export LD_LIBRARY_PATH=$1:$LD_LIBRARY_PATH
        else
            echo "'$1' is not a directory"
        fi
    fi
}

function postfix_LD_LIBRARY_PATH ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Add a directory at the end of the LD_LIBRARY_PATH environment variable."
        echo "Also checks that the argument exists and is a directory."
        _OpenMS_where_defined
    else
        if [ $1_ != _ ] && [ -d $1 ]; then
            export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$1
        else
            echo "'$1' is not a directory"
        fi
    fi
}

#-----------------------------------------------------------

function OpenMS_directory()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Set up environment variables for OpenMS using the given directory."
        echo "If the directory is a link, it is expanded."
        echo "This command comes in handy when you are working with release and development versions simultaneously."
        echo "Uses OPENMS_CONTRIB and OPENMS_QT4 (which should be set elsewhere, e.g. in your .bashrc)."
        echo "=>  See also:  OpenMS_develop,  OpenMS_release"
        _OpenMS_where_defined
    else
        if [ $1_ != _ ] && [ -d $1 ]; then
            dir=`cd $1; pwd -P`
            echo "Setting up environment for OpenMS in directory " ${dir}
            echo
            export OPENMS=${dir}
            echo export OPENMS=${OPENMS}
            export PROJECT=${dir}
            echo export PROJECT=${PROJECT}
            echo
            if [ -d ${OPENMS_CONTRIB}"" ]; then
                echo "######  OPENMS_CONTRIB="${OPENMS_CONTRIB}
                echo "# Adding " ${OPENMS_CONTRIB} " to LD_LIBRARY_PATH"
                prefix_LD_LIBRARY_PATH ${OPENMS_CONTRIB}/lib
                echo
            fi
            if [ -d ${OPENMS_QT4}"" ]; then
                echo "######  OPENMS_QT4="${OPENMS_QT4}
                echo "# Adding " ${OPENMS_QT4}/lib " to LD_LIBRARY_PATH"
                prefix_LD_LIBRARY_PATH ${OPENMS_QT4}/lib
                echo "# Adding " ${OPENMS_QT4}/bin " to PATH"
                prefix_PATH ${OPENMS_QT4}/bin
                echo
            fi
            echo "######  OPENMS="${OPENMS}
            echo "# Adding " ${OPENMS}/lib " to LD_LIBRARY_PATH"
            prefix_LD_LIBRARY_PATH ${OPENMS}/lib
            echo "# Adding " ${OPENMS}/bin " to PATH"
            prefix_PATH ${OPENMS}/bin
            echo
            echo cd ${OPENMS}
            cd ${OPENMS}
        else
            echo "'"$1"' is not a directory"
        fi
    fi
}

function OpenMS_develop ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Set up environment variables for OpenMS using directory ${HOME}/OpenMS."
        echo "("
        echo "  Check out the developmental version like this:"
        echo "    cd;"
        echo "    svn co https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS"
        echo ")"
        echo "=>  See also:  OpenMS_directory"
        _OpenMS_where_defined
    else
        OpenMS_directory ${HOME}/OpenMS
    fi
}

function OpenMS_release ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Set up environment variables for OpenMS using directory ${HOME}/Release."
        echo "("
        echo "  Check out a release like this:"
        echo "    cd;"
        echo "    svn co https://open-ms.svn.sourceforge.net/svnroot/open-ms/branches/Release1.2"
        echo "    ln -s Release1.2 Release"
        echo "  To switch from one release to another, replace the symbolic link."
        echo "  The linked directory will be 'expanded' by this function."
        echo ")"
        echo "=>  See also:  OpenMS_directory"
        _OpenMS_where_defined
    else
        OpenMS_directory ${HOME}/Release
    fi
}

# Note: the leading "\[\033]0;\u@\h:\w\007\]" is to update the window title.
function prompt ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Set a colorful prompt string (PS1) with specified width (default: 30)."
        echo "For width = -9999 the prompt will be ' $ '."
        _OpenMS_where_defined
    else
        export PROMPT_LENGTH=${1:-30}
        if [[ $TERM == "xterm" ]];
        then
            export PS1='\[\e]0;\u@\h:\w\007\]\[\e[47m\]\[\e[36m\]${PWD:((${#PWD}>${PROMPT_LENGTH}?-${PROMPT_LENGTH}+3:0))} \[\e[1;31m\]$(tmp=$?; if (($tmp)); then echo -e «$tmp»\ ; fi)\[\e[1;30m\]\$\[\e[0m\] '
        else
            export PS1='\[\e[1;35m\]${PWD:((${#PWD}>${PROMPT_LENGTH}?-${PROMPT_LENGTH}:0))} \[\e[32m\]\$\[\e[0m\] '
        fi
    fi
}


############################################################
#  MOVING AROUND (change working directory)
############################################################


function cwd
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Change to the current working directory, resolving symbolic links."
        _OpenMS_where_defined
    else
        cd `pwd -P`
    fi
}


function gos
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Change to corresponding source/ directory."
        echo "=>  See also: goi, gorel, godev"
        _OpenMS_where_defined
    else
        cd `pwd | sed "s/include\/OpenMS/source/"`
    fi
}


function goi
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Change to corresponding include/OpenMS/ directory."
        echo "=>  See also: gos, gorel, godev"
        _OpenMS_where_defined
    else
        cd `pwd | sed "s/source/include\/OpenMS/"`
    fi
}


function gorel
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Change to corresponding Release*/ directory."
        echo "Also print the LD_LIBRARY_PATH because usually this has to be changed as well... ;-)"
        echo "Assumes that a symbolic link like Release -> Release1.2 exists."
        echo "=>  See also: OpenMS_release, goi, gos"
        _OpenMS_where_defined
    else
        if ! ( pwd | grep --silent Release ); then  
            cd `pwd | sed "s:OpenMS:Release:"` && cwd
        else
            echo "Already in directory" `pwd`
        fi
        echo "Note: LD_LIBRARY_PATH contains"
        ldli | grep --color -e '\(OpenMS\)\|\(Release[0-9.]*\)' || echo 'neither OpenMS nor Release[0-9.]*'
    fi
}


function godev
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Change from Release*/ to corresponding developmental OpenMS/ directory."
        echo "Also print the LD_LIBRARY_PATH because usually this has to be changed as well... ;-)"
        echo "=>  See also: OpenMS_develop, goi, gos"
        _OpenMS_where_defined
    else
        cd `pwd | sed "s:Release[0-9.]*:OpenMS:"` && cwd
        echo "Note: LD_LIBRARY_PATH contains"
        ldli | grep --color -e '\(OpenMS\)\|\(Release[0-9.]*\)' || echo 'neither OpenMS nor Release[0-9.]*'
    fi
}


## A few not-so-nicely-self-documented functions follow below.  Will adapt
## them to the framework when time permits. -- Clemens

alias d='dirs -v | sed s:\\\([0-9][0-9]*\\\)\ :\ \\o033[31m\ \\1\ \\o033[0\;0m:g;'
alias dirs_v='echo $(dirs -v | sed s:\\\([0-9][0-9]*\\\)\ :\ \\o033[31m\ \\1\ \\o033[0\;0m:g;)'

## all you need to maintain a stack of directories
function g ()
{
    if [ "$1_" != "_" ]
    then
        dirs_num=$1
    else
        d
        dirs_num=xxx
        read -p "Your choice:  " -t 7 -n 1 dirs_num
        echo
    fi
    case ${dirs_num} in
        [0-9] )
            pushd +${dirs_num} > /dev/null
            dirs_v
            ;;
        "+")
            pushd . > /dev/null
            dirs_v
            ;;
        "-")
            popd > /dev/null
            dirs_v
            ;;
        *)
            echo ' (???)'
            ;;
    esac
}

alias a=alias

a ..='cd ..'
a ...='cd ../..'
a cd...=...
a ....='cd ../../..'
a cd....=....
a .....='cd ../../../..'
a cd.....=.....

a -- ++='g +'
a -- --='g -'
a -- g+='g +'
a -- g-='g -'
a -- g1='g 1'
a -- g2='g 2'
a -- g3='g 3'
a -- g4='g 4'
a -- g5='g 5'
a -- g6='g 6'
a -- g7='g 7'
a -- g8='g 8'
a -- g9='g 9'
a -- +1='g 1'
a -- +2='g 2'
a -- +3='g 3'
a -- +4='g 4'
a -- +5='g 5'
a -- +6='g 6'
a -- +7='g 7'
a -- +8='g 8'
a -- +9='g 9'

a cp='cp -i'
a rm='rm -i'
a mv='mv -i'


function manx ()
{
    ( PAGER='less -A' xterm -geometry 120x50 +sb -b 3 -selbg yellow -title "man  $*"  -xrm "XTerm*faceName: Bitstream Vera Sans Mono" -xrm "XTerm*faceSize: 7" -e man -a $* ) &
}



############################################################
#  WORKING (actually do something)
############################################################

function elc ()
{
    emacsclient_line_column $*
}

function emacsclient_line_column ()
{
    if ( ( eval $OpenMS_do_help_condition ) || ( [[ $# == 0 ]] ) ) ;
    then
        echo "Open one or more file(s) in a running emacs."
        echo "\"elc\" is an abbreviation for \"emacsclient-line-column\""
        echo "This does some sed-magic with the command line such that"
        echo "e.g. the following will open files at line 33 resp. column 44:"
        echo "elc fileA fileB:33 fileC:33: fileD:33:44 fileE:33:44:"
        _OpenMS_where_defined
    else
        ( echo $* | sed 's/ /\n/g' | sed 's#:$##g; s#\(\(:[0-9]\+\)\{1,2\}\)$#%%\1#g; s#\(.\+\)%%:\([:0-9]\+\)$#+\2 \1#g' | xargs emacsclient --no-wait ) &
    fi
}

#-----------------------------------------------------------

function safer_sed ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Run 'sed' in place (!), making backups with time stamp.  DANGEROUS."
        echo "NOTES:"
        echo "  1. Think twice before running _any_ sed command."
        echo "  2. Do not rely on this function alone for making backups."
        echo
        echo "=>  For further advice, see also:  backup, type safer_sed, info sed"
        _OpenMS_where_defined
    else
        sed '-i.sed_backup.'`Date` $*
    fi
}

#-----------------------------------------------------------

function backup ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Make a backup file with time stamp in subdirectory ./backup."
        echo "Leading directories names are removed from filename using 'basename'."
        echo "Assumes subdirectory ./backup has been created before."
        echo "=>  See also: Date"
        _OpenMS_where_defined
    else
        if [ $# == 1 ]; then
            if ! ( [ -e $1 ] && [ -r $1 ] && [ -f $1 ] && [ -s $1 ] ); then
                echo "Error:" $1 "is not an existing readable regular file of non-zero size"
            else
                if ! ( [ -e ./backup ] && [ -d ./backup ] && [ -r ./backup ] && [ -w ./backup ] && [ -x ./backup ] ); then
                    echo "./backup is not an existing directory with permissions rwx"
                else
                    doit_tmp="cp $1 ./backup/"`basename $1`.`Date`
                    echo $doit_tmp
                    $doit_tmp
                fi
            fi
        else
            echo "Usage: backup filename"
            backup --help
        fi
    fi
}

#-----------------------------------------------------------

function mogrify_margin ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Call mogrify (see ImageMagick) with suitable options to remove margins from screenshots."
        echo "=>  See also: http://www.imagemagick.org/"
        _OpenMS_where_defined
    else
        mogrify -fuzz 5% -trim -bordercolor white -border 1x1 $1
    fi
}

#-----------------------------------------------------------

function postscript_boundingbox ()
{
    if eval $OpenMS_do_help_condition;
    then
        echo "Call ps2eps  with suitable options to recalculate the bounding box."
        _OpenMS_where_defined
    else
        ps2eps -B --size=a0 --loose $1
    fi
}

#-----------------------------------------------------------

echo " done"

