# -*- Mode: makefile; tab-width: 2; -*-
# vi: set ts=2:
#
# ==========================================================================
#
# This is config_defs.mak.in/config_defs.mak
# Please do ONLY change config_defs.mak.in,
# as config_defs.mak is automagically
# created by configure from config_defs.mak.in
#
# ==========================================================================
#
# --------------------------------------------------------------------------
#                   OpenMS Mass Spectrometry Framework
# --------------------------------------------------------------------------
#  Copyright (C) 2003-2007 -- Oliver Kohlbacher, Knut Reinert
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# --------------------------------------------------------------------------
# $Maintainer: Marc Sturm $
# --------------------------------------------------------------------------


# First, some basic unix commands, including the C++ compiler

# gmake
MAKE = @MAKE@

# diff
DIFF = @DIFF@

# grep
GREP = @GREP@

# sed
SED = @SED@

# archiver ar (to create static libraries)
AR = @AR@

# dynamic archiver (to create shared libraries)
DYNAR = @DYNAR@

# options for library generation
AROPTS = @AROPTS@

# options for shared library generation
DYNAROPTS = @DYNAROPTS@

# suffix of shared library filenames
SHARED_LIB_SUFFIX = @SHARED_LIB_SUFFIX@

# C++ compiler
CXX = @CXX@
# unix command rm, used to remove obsolete files (target clean)
RM = @RM@
# unix command cp, used to copy files
CP = @CP@
# unix command mv, used to install libraries (target install.*)
MV = @MV@
# unix command strip, used to strip away unused stuff from object files
STRIP = @STRIP@
# the echo command (on some platforms with an additional -e to expand '\n')
ECHO = @ECHO_COMMAND@
# the find command
FIND = @FIND@


OS       = @OS@
# name of your OS
OSREV    = @OSREV@
# full revision number
OSMAJOR  = @OSMAJOR@
# major revision number (full revision number cut at the first dot)
BINFMT   = @BINFMT@
# binary format type (platform-architecture-compiler)

# OPENMS_PATH is the OPENMS root directory (the directory in which include and source reside)
# OPENMS_INCLUDES contains compiler flags to set the OPENMS include paths
# and OPENMS_LIBS is set to $OPENMS_PATH/lib/$BINFMT
#
OPENMS_PATH       = @OPENMS_PATH@
OPENMS_INCLUDES   = @OPENMS_INCLUDES@
OPENMS_LIBS       = @OPENMS_LIBS@

# These are the flags for the contrib libraries.
# These flags are used in the Makefiles to determine whether
# specific objects can be built (see e.g. ANALYSIS/Makefile).

CGAL_SUPPORT      = @CGAL_SUPPORT@
BOOST_SUPPORT     = @BOOST_SUPPORT@
ANDIMS_SUPPORT    = @ANDIMS_SUPPORT@
NETCDF_SUPPORT    = @NETCDF_SUPPORT@
FFTW_SUPPORT      = @FFTW_SUPPORT@
LIBSVM_SUPPORT    = @LIBSVM_SUPPORT@
MOC               = @MOC@
UIC               = @UIC@
ENABLE_DB         = @ENABLE_DB@
ENABLE_GUI        = true
GUI_INCLUDES      = @GUI_INCLUDES@
GUI_LIBS          = @GUI_LIBS@
SIP               = @SIP@
SIP_LIB           = @SIP_LIB@
SIP_INCLUDES      = @SIP_INCLUDES@
PYTHON_INCLUDES   = @PYTHON_INCLUDES@
PYTHON_SUPPORT    = @PYTHON_SUPPORT@ 
PYTHON_LIBS       = @PYTHON_LIBS@

#
# Support for valgrind, a memory leak checker.
# Try "make valgrind" in source/TEST.
#
VALGRIND = @VALGRIND@
VALGRIND_OPTS = @VALGRIND_OPTS@

# These are standard flags. CXXFLAGS to compile, LDFLAGS to link programs
# DEFINES and DEBUG are both part of CXXFLAGS
# ADD_CXXFLAGS are also passed on to the C++ compiler
# but are NOT passed on to makedepend
# This is the place for compiler options that are not understood
# by makedepend (e.g. -Olimit using IRIX DCC)
#
CXXFLAGS        = @CXXFLAGS@
LDFLAGS         = @LDFLAGS@
ADD_CXXFLAGS    = @ADD_CXXFLAGS@

# all the libraries in linker usable format (-l..)
LIBS      = @LIBS@
#
DEFINES   = @DEFINES@
#
CXXFLAGS_D    =  @CXXFLAGS_D@  
CXXFLAGS_O    =  @CXXFLAGS_O@ 

#
# additional CXXFLAGS for building library objects
LIB_CXXFLAGS = @LIB_CXXFLAGS@

#
# additional CXXFLAGS for building applications, tests, examples
# used instead of LIB_CXXFLAGS in APPLICATIONS, EXAMPLES, TEST, BENCHMARKS
NONLIB_CXXFLAGS = @NONLIB_CXXFLAGS@

# MODE_FLAGS is set to DEBUG_FLAGS or OPTIMIZE_FLAGS, this
# can be controlled by specifying the configure switch 
# --enable-optimization
CPP_MODE_FLAGS  = @CPP_MODE_FLAGS@
# If you change your mind later, you might instead uncomment one of the following lines:
# CPP_MODE_FLAGS  = $(CXXFLAGS_D)
# CPP_MODE_FLAGS  = $(CXXFLAGS_O)

# CPP_MODE_FLAGS_NO_OPTIMIZATION is used in the (luckily quite rare!)
# cases where the compiler crashes when performing optimization.
# In this case, the source files will be compiled using CPP_MODE_FLAGS_NO_OPTIMIZATION
# instead of CPP_MODE_FLAGS
CPP_MODE_FLAGS_NO_OPTIMIZATION = @CPP_MODE_FLAGS_NO_OPTIMIZATION@

# if g++ is used, configure tries to determine its standard include directories
# this is used to prevent trouble when calling makedepend. Otherwise makedepend
# will produce loads of (irrelevant) warnings
STD_CPP_INCLUDES  = @STD_CPP_INCLUDES@

#  These are the major source directories.
#  They are entered in this order and "make all" is executed.
#  To build the library each of these directories is entered und "make libadd" is executed
#  to add the subdirectories' objects to the library.
#
DIRS  = @SUBDIRS@
GUI_DIRS = @GUISUBDIRS@
