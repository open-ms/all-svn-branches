/**
 	
  @page install_mac Building %OpenMS on Mac OS X

  @section install_mac_read Read this section first!
  
  This document addresses %OpenMS users and explains the
  installation procedure for building %OpenMS from its sources. If you only want to use the %OpenMS Proteomics Pipeline (TOPP), you are strongly
	encouraged to <b>download the binary installer</b>
	(see <a href="http://www.OpenMS.de" target="_blank">here</a>),
	instead of building %OpenMS from sources. 
  Be aware though that we do not provide binary installers for every MacOS version.
  For more information read the install instructions for the TOPP binaries.

	This document especially considers the installation
  of several libraries which are required by %OpenMS. Most of these libraries are made available in our "contrib-package" (see below).
  <br>
  If you encounter errors during configuring/compiling our software, have a look at our "Known Issues" section (documentation), maybe the error is already known. If not, please write to the mailing list.
  
  <b>Required applications</b>
  
  In order to compile %OpenMS, several applications need to be installed:
   - XCode (version 3.0 or higher) is required to build %OpenMS (the current version can be obtained from <a href="http://developer.apple.com/technology/xcode.html" target="_new">http://developer.apple.com/technology/xcode.html</a>)
   - CMake (version 2.8.1 or higher) is required to configure and build the package 
	 - Qt4 (version 4.5. or higher)  containing qmake and the header files is required (either a dmg file or source packages can be obtained from <a href="http://www.qtsoftware.com/" target="_new">http://www.qtsoftware.com/</a>)
  
  If your %OpenMS version is a development version from SVN, the following 
  applications are needed in order to create the %OpenMS documentation:
    - doxygen (We recommend version 1.7.1 since some 1.6 versions have a serious bug that makes building the %OpenMS documentation impossible)
    - pdflatex

<HR> 
	
 @section install_mac_contrib Installing the contrib package

  In order to facilitate the installation of the libraries required for %OpenMS, we composed a
  "contrib-package" containing the libraries Boost, GSL, libSVM, SeqAn, glpk, zlib, bzip2 and Xerces-C. 
    
  The contrib package is contained in the %OpenMS release package and is available under the path @em contrib in the %OpenMS directory.
  
  If you are using the developer version of %OpenMS, you must check out the contrib from Sourceforge SVN repository

@code
svn co "https://open-ms.svn.sourceforge.net/svnroot/open-ms/contrib"
@endcode
  
  CMake is used to check the system and create the contrib libraries.
  
  <OL>
    <LI>open a Terminal (/Applications/Terminal.app)</LI>
    <LI>create a build directory for the %OpenMS contrib <br>
          -e.g. $ mkdir ~/openms-development/contrib_build</LI>
    <LI>enter the created directory and call cmake to build the contrib

@code
cd <path_to_contrib_build>
cmake <path_to_contrib>
@endcode

Example:

@code
cd ~/openms-development/contrib_build
cmake ~/openms-development/contrib
@endcode

    </LI>
  </OL>

  If everything worked, the following sub-directories were created under in the contrib build directory:

  <ul>
    <li>'lib/'
    <br>
    It contains the libraries needed by %OpenMS.
    </li>
    <li>'include/'
    <br>
    It contains the header files needed for %OpenMS.</li>
  </ul>

  @note To avoid problems while building the libraries contained in the contrib package, the path
  to your contrib directory should not have any spaces in it.

  @note All shipped libraries are build as Mach-O universal binaries containing both 32-bit and 64-bit x86 code.

<HR>

 @section install_mac_openms Installing %OpenMS/TOPP
 
		If you have not installed the libraries which %OpenMS requires,
		please refer to the section @ref install_win_contrib above.
		<br>
		Assuming you have successfully installed the dependent libraries, you need to
		get the %OpenMS source code. The latest stable version of %OpenMS
		can be found in the <a href="http://www.OpenMS.de/download.php" target="_blank">download</a> page.
		For further (e.g. latest developer version from SVN) info see the <a href="http://open-ms.sourceforge.net/download.php" target="_blank">download instructions</a>.
		<br>
		<br>

   <OL>
      <LI>open a Terminal (/Applications/Terminal.app)</LI>
      <LI>create a build directory for %OpenMS<br>
          -e.g. $ mkdir ~/openms-development/openms_build
      <LI>call cmake to create the build system there
@code
cd <path_to_OpenMS_build>
cmake -D CMAKE_FIND_ROOT_PATH="<path_to_contrib_build>" <path_to_OpenMS>
@endcode

  You can set CMake variables using the <code>-D VARIABLE=VALUE</code> option.
  A full list of the CMake variables is shown when you execute

@code
ccmake ~/openms-development/openms_build
@endcode

  @note You need to execute <code>cmake</code> before using <code>ccmake</code>.

      Example:
@code
cd ~/openms-development/openms_build
cmake -D CMAKE_FIND_ROOT_PATH="~/openms-development/contrib_build" "~/openms-development/openms"
@endcode

  </OL>  
  
  The most important CMake variables are:

  <table style="border-style:solid; border-collapse:collapse; border-color:#c0c0c0;">
    <tr>
      <td valign="top">INSTALL_PREFIX</td>
      <td>the path where the library is installed.
          <BR>
          <b>Note:</b> Moving the library after installing it is not possible! 
          Please use this option to point CMake to the location %OpenMS should
          be installed to.
					
					Install prefixes are not supported for developing with %OpenMS. %OpenMS must
          be built in place!
					</td>
    </tr>
    <tr>
      <td valign="top">CMAKE_FIND_ROOT_PATH</td>
      <td>Additional search path for the contrib libraries.
          If not set the the location is assumed to be <tt>&lt;path_to_OpenMS&gt;/contrib</tt>.</td>
    </tr>
    <tr>
      <td valign="top">QT_QMAKE_EXECUTABLE</td>
      <td>Defines the Qt 'qmake' application. The corresponding Qt installation is used.</td>
    </tr>
    <tr>
      <td valign="top">CMAKE_BUILD_TYPE</td>
      <td>Should be either 'Release' (optimization enabled) or 'Debug' (debug info and 
          precondition/postcondiction checks enabled).
          @n The default is 'Release'.</td>
    </tr>
    <tr>
      <td valign="top">QT_DB_PLUGIN</td>
      <td>Defines the Qt database type. By default MySQL is used.</td>
    </tr>
    <tr>
      <td valign="top">CMAKE_CXX_COMPILER</td>
      <td>Defines the C++ compiler to use.</td>
    </tr>
  </table>

  After CMake was executed, you can list the make targets by calling:

@code
make targets
@endcode
  
  In order to build the %OpenMS library and TOPP tools execute the following command:
@code
make
@endcode

  If you have chosen to use a install prefix via the INSTALL_PREFIX variable you should install the components using:

@code
make install
@endcode

  @note Make sure to add <i>&lt;path_to_OpenMS&gt;/lib/</i> (e.g. <i>~/openms-development/openms_build/lib/</i>) to the environment variable <b>DYLD_LIBRARY_PATH</b>.
  
  @note The TOPP tools are ready to use in the <code>bin/</code> folder of the installation directory. Add this folder to your <b>PATH</b> variable.

<HR>

 @section install_mac_testing_openms Testing your %OpenMS / TOPP installation  
  
  After you have installed %OpenMS and TOPP, you should test your installation by executing the following command:

@code
make test_build
make test
@endcode
  
  @note To enable DB connectivity tests, use the following CMake parameters:
  - DB_TEST
  - DB_TEST_HOST
  - DB_TEST_PORT
  - DB_TEST_DB
  - DB_TEST_USER
  - DB_TEST_PW
  
<HR>
 
 @section install_mac_64bit Building %OpenMS / TOPP with 64bit support

 Building %OpenMS with 64bit support requires Qt 4.5 (or higher) build with 64bit support. You need to specify the architecture, by adding the option
 
@code
-D CMAKE_OSX_ARCHITECTURES="x86_64"
@endcode
 
 to the CMake call.

 On Mac OS X 10.6 (Snow Leopard) 64bit is the default architecture. Use 

@code
 -D CMAKE_OSX_ARCHITECTURE="i386"
@endcode  

  to create a 32bit binary.
*/
