/**
	
	@page install_linux Installation on Linux

  @section install_linux_read Read this!
  
  This document addresses %OpenMS users and explains the
  installation procedure. It especially considers the installation
  of several libraries which are required by %OpenMS. Most of these 
  libraries are made available in our "contrib-package" (see below).
  
  <b>Required applications</b>
  
  In order to compile %OpenMS, several applications need to be installed:
	 - Compiler: An ANSI-compatible C++ compiler is required. <BR>Currently g++ 4.1.0 or higher is supported.  <BR>Older versions might still work, but are not actively maintained. <BR>g++ is part of the GNU Compiler Collection (GCC).
	 - Autoconf 2.9 or higher is required
	 - GNU make is required
  
  <p>
  If your %OpenMS version is a development version from SVN, the following 
  applications are needed in order to create the %OpenMS documentation:
		- doxygen (We recommend version 1.5.4)
  	- pdflatex

  <p>
  Depending on your linux distribution, you might have to install the following packages (names may vary):
  	- build-essential (Ubuntu)
  	- qt4-devel
  	- x11-devel
  	- libXmu-devel

  @section install_linux_required Installing required dependency libraries
  
  %OpenMS depends on several other libraries. Most of them are
  standard and should be present in many systems anyway. Some of
  those libraries again depend on others. Here is a little overview
  of the dependencies:

  <table cellpadding="2" cellspacing="0" border="0">
    <tr>
      <td align="left">&nbsp;</td>
      <td align="left">ANDI/MS</td>
      <td align="left">(requires NetCDF)</td>
    </tr>
    <tr>
      <td align="left">&nbsp;</td>
      <td align="left">GSL</td>
      <td align="left">&nbsp;</td>
    </tr>
    <tr>
      <td align="left">&nbsp;</td>
      <td align="left">CGAL</td>
      <td align="left">&nbsp;</td>
    </tr>
    <tr>
      <td align="left">&nbsp;</td>
      <td align="left">XERCES-C</td>
      <td align="left">&nbsp;</td>
    </tr>
    <tr>
      <td align="left">&nbsp;</td>
      <td align="left">libSVM</td>
      <td align="left">&nbsp;</td>
    </tr>
    <tr>
      <td align="left">&nbsp;</td>
      <td align="left">SeqAn</td>
      <td align="left">&nbsp;</td>
    </tr>
    <tr>
      <td align="left">&nbsp;</td>
      <td align="left">Qt</td>
      <td align="left">(requires other libraries for DB support e.g. MySQL)</td>
    </tr>
  </table>

  In order to make the
  installation of the required libraries easier, we composed a
  "contrib-package" containing the libraries ANDI/MS, NetCDF, GSL, CGAL, libSVM, SeqAn and XERCES-C. 
  This contrib package has several advantages over manual installation
  - you get all the libraries in versions tested with %OpenMS.
  - it contains a configure script that builds all the libraries in one step.
  - you don't have to spend hours reading installation instructions of all the libraries.
  - we applied some patches to the libraries to fix some bugs. <BR><b>These bugs may be fatal if you do not use the contrib package.</b>

  We recommend using the contrib package! Qt and MySQL are not
  contained in the contrib package as they are installed on most
  systems anyway. If they are not installed on your system, you
  have to install those two libraries first. 
  
  @subsection install_linux_mysql MySQL
  
  The MySQL database is accessed by %OpenMS through functionality
  provided by Qt. The MySQL versions 4.0.18 and 4.1.10a have been
  tested and used with %OpenMS.
  <br>
  You can get the sources at 
  <a href="http://dev.mysql.com/downloads/mysql/4.1.html" target="_blank">http://dev.mysql.com/downloads/mysql/4.1.html</a>
  in the 'source download' section.
  <br>
  Good installation instructions for MySQL can be found at 
  <a href="http://dev.mysql.com/doc/mysql/en/installing-source.html" target="_blank">http://dev.mysql.com/doc/mysql/en/installing-source.html</a>.
  <br>
  Basically the installation boils down to this:

  <pre>
&gt; ./configure --prefix=&lt;prefix&gt;
&gt; make
&gt; make install
</pre>

  @note If you want to use preinstalled MySQL binaries, make sure that the mysql-devel package is installed.

  @subsection install_linux_qt Qt

  For GUI and database access we use Qt 4.3. You can obtain the source code from 
  <a href="http://www.trolltech.com/download/index.html" target="_blank">http://www.trolltech.com/download/index.html</a>.

  <p>Run configure with the '-verbose' option. With that option a
  summary is shown before the you have to accept the licence. Make
  sure that MySQL (or any other DB you want to use) and OpenGL support are enabled in the summary.</p>

<pre>
&gt; ./configure -verbose -fast -no-qt3support (... see below)
&gt; make
</pre>

  <p><b>SQL support:</b>
  <br>
  Use the configure option '-qt-sql-&lt;driver&gt;' to enable database support. There is a
  Qt driver for a lot of SQL database provided by Qt. Check the Qt manual for details.</p>
  
	@note If you want to use the preinstalled binaries, make sure that the qt-devel package is installed.
  
  @note Qt 4.4.1 and higher can also be used, although this version has several minor bugs.
  
  @subsection install_linux_contrib Installing the contrib package
  
  @b Download:
  
  The contrib package is contained in the %OpenMS release package and is available under the path contrib in the %OpenMS directory.
  
  If you are using the developer version of %OpenMS, you must check out the contrib from Sourceforge SVN repository
	<pre>&gt; svn co https://open-ms.svn.sourceforge.net/svnroot/open-ms/contrib</pre> 
	to obtain the latest developer version (potentially unstable).
  
  @b Installation:
  @n Execute:
  <pre>
&gt; ./configure
	</pre>

	The following configure options can be used:

  <table border="0"  cellspacing="0" cellpadding="0">
    <tr>
      <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
      <td>
        --with-compiler=CXX
      </td>
      <td>&nbsp;use CXX as C++ compiler (default: g++)</td>
    </tr>
    <tr>
      <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
      <td>
        --with-c-compiler=CC&nbsp;&nbsp;
      </td>
      <td>&nbsp;use CC as C compiler (default: gcc)</td>
    </tr>
  </table>
  
  <BR>
  If you do not give any configure options, it is assumed that you
  want to use 'gcc' as C-compiler and 'g++' as C++-compiler.

	@note If <code>./configure</code> is not executable on your system, you should execute <tt>autoconf</tt> before the above commands.

  Next you can build all the libraries with

  <pre>
&gt; make all
</pre>

  If everything worked, the following sub-directories were created:

  <ul>
    <li>'lib/' or the given 'libdir' (as ./configure option)
    <br>
    It contains the libraries needed by %OpenMS.
    <br>
    This directory should be added to your LD_LIBRARY_PATH variable.</li>

    <li>'include/'
    <br>
    It contains the header files needed for %OpenMS.</li>
  </ul>

  @section install_linux_openms Installing OpenMS
 
 	You need to get the %OpenMS source code from our website. The latest stable version of %OpenMS can be found in the 
	<a href="http://sourceforge.net/project/showfiles.php?group_id=90558" target="_blank">files</a> section.
	For further (e.g. latest developer version from SVN) info see the <a href="http://open-ms.sourceforge.net/download.php" target="_blank">download instructions</a>.

  If you have not installed the libraries which %OpenMS requires, please refer to the section @ref install_linux_required above. Otherwise you might only get parts of the full %OpenMS functionality.
  <br>
  Assuming you have successfully installed the dependent libraries, you can proceed.
  <br>
  <br>
  After you got the source code and prepared the contrib libs go to the <tt>source</tt> directory and type in the following commands (... see 'configure --help' and below for more options during <code>./configure</code>)

  <pre>
&gt; ./configure
&gt; make lib
&gt; make install
  </pre>This should do the job.
  <br>
  <br>
  The most important configure options are:

  <table border="0">
    <tr>
      <td>--prefix=DIR&nbsp;&nbsp;&nbsp;</td>
      <td>the path where the library is installed.
          <BR><b>Note:</b> Moving the library after installing it is not possible! 
          Please use this option to point configure to the location %OpenMS should
          be installed to.</td>
    </tr>
    <tr>
      <td>--with-default-path=DIR&nbsp;&nbsp;&nbsp;</td>
      <td>use default path DIR/include for header files and DIR/lib
      for libraries (<i>../contrib</i> if unset)</td>
    </tr>
    <tr>
      <td>--with-qt=QTDIR</td>
      <td>Qt is installed in QTDIR.</td>
    </tr>
    <tr>
      <td>--with-compiler=CXX</td>
      <td>use CXX as C++ compiler</td>
    </tr>
  </table>
	<p>
		
  @note If <code>./configure</code> is not executable on your system, you should execute <tt>autoconf</tt> before the above commands.
  
  <p>
	If <code>./configure</code> fails, a file called <b>config.diag.tar</b> is created. Please send this file
  together with a description of the problem by <a href="http://open-ms.sourceforge.net/contact.php" target="_blank">email</a>.

	Add <i>&lt;path_to_OpenMS&gt;/lib/</i> (e.g. <i>~/OpenMS/lib/</i>) to the environment variable <b>LD_LIBRARY_PATH</b> (as suggested by the previous <code>make</code>).
	
	On 64bit machines it may be requiered to switch off support for ANDI/MS and netCDF using the switches  --disable-andims and --disable-netcdf, however these data formats will not be supported then.

  @section install_linux_testing_openms Testing your OpenMS installation  
  
  After you have installed %OpenMS, you can test your installation
  by executing the following command:

  <pre>
&gt; cd &lt;path_to_OpenMS&gt;/source/
&gt; make test
</pre>
	
	@note To test the DB connectivity, copy the file
	'&lt;path_to_OpenMS&gt;/source/TEST/DB_credentials_template.txt'
	to 'DB_credentials.txt' and fill in your DB access details. As
	long as the 'DB_credentials.txt' file remains there, the DB will
	be tested with any subsequent call of 'make test'. 
	In order to successfully test DB connectivity, the database must exist 
	and the the given user must have write access to the database.
	
  @section install_linux_topp Building the TOPP tools
  
	TOPP is a toolset for the analysis of HPLC/MS data. It consists of several small applications that can be chained to create analysis pipelines tailored for a specific problem.
	<BR>
	<BR>
  After you have built %OpenMS, you can build the TOPP tools
  with the following command:

  <pre>
&gt; cd &lt;path_to_OpenMS&gt;/source/
&gt; make TOPP
</pre>Now the TOPP tools are ready to use in <code>${PREFIX}/bin/</code>.
  <br>

  @section install_linux_testing_topp Testing the TOPP tools
  
  After you have built the TOPP tools, you can test them with the following command:

  <pre>
&gt; cd &lt;path_to_OpenMS&gt;/source/
&gt; make TOPPtest
</pre> 

  @note To test the DBImporter and DBExporter go to the '&lt;path_to_OpenMS&gt;/source/TEST/TOPP/' directory and copy the files 'DBImporter_input_template.ini' and 'DBExporter_input_template.ini' to 'DBImporter_input.ini' and 'DBExporter_input.ini', respectively. Then fill in your DB access details. As long as these file remains there, the DB will be tested with any subsequent call of 'make TOPPtest'. In order to successfully test the tools, the database must exist and the the given user must have write access to the database.

*/
