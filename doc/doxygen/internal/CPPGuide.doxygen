// -*- mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// --------------------------------------------------------------------------
//                   OpenMS Mass Spectrometry Framework
// --------------------------------------------------------------------------
//  Copyright (C) 2003-2008 -- Oliver Kohlbacher, Knut Reinert
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
// $Maintainer: Marc Sturm $
// --------------------------------------------------------------------------

/// @cond INTERNAL_INFO

/**
	@page CPP C++ guide
	
This file contains general C++ guidelines that are not OpenMS-specific.

<H2 style="margin-top:20px; border-top:1px solid grey;">The 'using' directive</H2>

For <TT>.h</TT> files it is strictly forbidden to use <TT>using namespace %OpenMS;</TT>, 
<TT>using namespace std;</TT> or similar. This may cause name clashes (see 'Effective C++').
<p>
In <TT>.C</TT> files you should not import complete namespaces to the scope either.
Instead, introduce individual symbols to the scope where you need
them. E.g. you would write <TT>using std::vector;</TT> instead of <TT>using namespace std;</TT>.
This immediately gives a hint to where the symbol is defined as well.

<H2 style="margin-top:20px; border-top:1px solid grey;">Pass-by-value versus pass-by-reference</H2>

Except of primitive types (int, double, float, ....) all method arguments should be passed as non-mutable references.
<p>
Return types of methods should be non-mutable references as well, where possible.
Sometimes you cannot use references as the retuned value is constructed in the method.
If the constructed type is large, you can save computation time like that:
@code
//Bad idea
LargeObject someFunction()
{
  LargeObject tmp = ...
  return tmp;
}

//Better idea
void someFunction(LargeObject& obj)
{
  obj = ...
}
@endcode

<H2 style="margin-top:20px; border-top:1px solid grey;">Pointers versus references</H2>

If you do not have really good reasons to do so, do not use pointers.
They tend to cause segmentation faults!
In 9 out of 10 cases a reference does the job as well!

<H2 style="margin-top:20px; border-top:1px solid grey;">Iterators</H2>

In simple looping constructs, iterators are generally preferable to indexed
access.  Prefer ``<code>++i</code>'' to ``<code>i++</code>'', because the preincrement operator can safe
a copy constructor.  Use <code>const_iterators</code> where possible to help
avoiding unwanted side effects.

<H2 style="margin-top:20px; border-top:1px solid grey;">Includes</H2>

Includes in header files should be avoided and replaced by forward declarations.<BR>
Unnecessary includes cause longer compile times after changes in %OpenMS header.
<p>
Reasons for includes in header files are:
<UL>
	<LI> Headers of base classes have to be included in the header of the derived classes.
	<LI> If a class has members of type T (not T* or T&) the header has to be included.
	<LI> Headers of template classes have to be included.
</UL>

An example class could look like this:
@code
#include <QtGui/QMainWindow>
#include <QtGui/QPainter>

// Forward declaration in main namespace
class QLabel;

namespace OpenMS
{
	// Forward declaration in OpenMS namespace
 	class Spectrum1DWidget;
 	
  class Dummy 
  	: public QMainWindow
  {
  	...
  	
  	protected:
  		Spectrum1DWidget* parent_;
  	  QLabel* label_;
  	  QPainter painter_;
  }
}

@endcode

<b>Note:</b> In OpenMS, Qt headers have to be included with the library prefix!

<H2 style="margin-top:20px; border-top:1px solid grey;">Input/Output</H2>

Note that code like <code>std::cout << "blabla" << std::endl;</code> forces the output buffer to be <i>flushed</i>,
i.e. written to disk <i>immediately</i>, which is a big nuisance.
Get used to write code like <code>std::cout << "blabla\n";</code>.
Debug output can be an exception, because the content of the stream buffer may be lost upon segfault etc..

Write sufficiently many digits to avoid unnecessary rounding errors.
Use the constants OpenMS::written_digits_real, OpenMS::written_digits_doublereal, etc.
which are defined in <OpenMS/CONCEPT/Types.h>.

*/

/// @endcond
