// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// --------------------------------------------------------------------------
//                   OpenMS Mass Spectrometry Framework
// --------------------------------------------------------------------------
//  Copyright (C) 2003-2007 -- Oliver Kohlbacher, Knut Reinert
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
// $Maintainer: Marc Sturm $
// --------------------------------------------------------------------------

// ATTENTION:
// Please write OpenMS like this:  %OpenMS
// Otherwise a link to the namespace is created.
// Thanks!


/// @cond INTERNAL_INFO

/**
	@page FAQ Internal FAQ
	
	<H2 style="border-top:2px solid grey;">General information</H2>
		<UL>

			<LI><B>I am new to %OpenMS. What should i do first?</B>
				<OL>
					<LI> Check out the developement verison of %OpenMS (see website).
					<LI> Build the internal documentation (use 'make idoc' instead of 'make doc').
					<LI> Try and build OpenMS according to the installation instructions.
					<Li> Read the %OpenMS Coding Convention.
					<LI> Read the %OpenMS Tutorial.
					<LI> Create a SourceForge account and send your account name to your supervisor.<BR>
					     He then adds you to the %OpenMS developers team.
					<LI> Register to the open-ms-general and open-ms-developers mailing list.<BR>
					     (You can see the developers list only if you are logged in to Sourceforge and 
					     if you are a %OpenMS developer).
				</OL>
			<LI><B>Is there a central URL for %OpenMS developers?</B>
				<BR>
				http://www-bs2.informatik.uni-tuebingen.de/services/OpenMS/search/
				<BR>
				There you can search for %OpenMS classes and it links out to several 
				websites of interest.
				
			<LI><B>How do I update the website?</B>
				<OL>
					<LI> Check out the @a website module:
					<BR>
					<TT>svn co https://open-ms.svn.sourceforge.net/svnroot/open-ms/website</TT>
					<LI> Edit the website
					<LI> Commit the changes
					<LI> Execute <TT>update.sh &lt;sf-login&gt;</TT>
					<LI> Execute <TT>chmod -R 775</TT> in <TT>/home/groups/o/op/open-ms/htdocs/</TT> auf <TT>shell.sourceforge.net</TT>.
							 <BR>(Otherwise other developers will not be able to overwrite the files).
				</OL>

	    <li><b>How do I add a new directory in the <tt>source/</tt> directory to the build system?</b><br>
	      Add the new directory to <tt>source/config/Makefile.in</tt>.

	    <li><b>Can I use QT designer to create GUI widgets?</b><br>
	      Yes! If you want to create a class called @a Widget:
	
	      <ul>
	        <li>Create .ui-File with QT designer and store it as
	        <tt>Widget.ui</tt>.
	
	        <li>Add the class to the <tt>Makefile</tt>
	        (<tt>Widget.C</tt> and <tt>Widget_moc.C</tt>).
	        Use OpenDialog as an example which changes are needed.</li>
	
	        <li>From the .ui-File the file
	        <tt>include/OpenMS/VISUAL/UIC/ClassTemplate.h</tt> is
	        generated by the build system.
	        <br>
	        DO NOT CHECK-IN THIS FILE, AS IT IS GENERATED
	        AUTOMATICALLY, WHEN NEEDED!!!</li>
	
	        <li>Derive the class <tt>Widget</tt> from
	        <tt>WidgetTemplate</tt>. You need to check in the
	        <tt>Widget.h</tt> and <tt>Widget.C</tt> files.</li>
	      </ul>

	    <li><b>How can i speed up the compile process?</b><br>
	    	<UL>
	      	<LI> For g++ you can use the wrapper <tt>ccache</tt>. It caches the preprocessor output.
	      	<LI> If you have several pocessors you can build %OpenMS classes/tests and TOPP tools
	             in in several threads (2 per core) using the @a make option @a -j.
               However this does not work for all targets and on some platforms we
               have observed that files are compiled multiple times.
               In this case, it might be better to use a "parallel make" only in recursive
               invocations of make.  On a dual core machine, you could try the following:
               <code>make depend && make "MAKE=make -j4 " lib && make install && make "MAKE=make -j4 " test</code>.
				</UL>
		</UL>

	<H2 style="border-top:2px solid grey;">Common problems</H2>
		<UL>
			<li><b>After adding a class or after a SVN update, an @a undefined @a reference error occurs during execution of programs.</b><br>
			  Execute <tt>make recollect</tt> in the <tt>source</tt> folder, which will update the files that are added to the library.
			
			<li><b>After a SVN update, a 'No rule to make target' error occurs during @a make.</b><br>
				Try @a make @a depend in order to get the dependencies right!

			<li><b>Can the CHECK-macro not handle template methods that have two or more arguments?</b><br>
				Put round brackets around the method declaration. Then it should work.
		</UL>

	
	<H2 style="border-top:2px solid grey;">Debugging</H2>
		<UL>
			<li><b>How do I debug a failed %OpenMS test?</b><br>
	    	Exeute the test with the @a -V option to see where the error
	    	occurred.
	    
	    <li><b>How do I debug a failed TOPP test?</b><br>
	    	Let @a make execute the test in debug/verbose mode, e.g.:
	    	<BR>
	    	<tt>shell&gt; make DEBUG=1 VERBOSE=1 FeatureFinder_test</tt>
			
	    <li><b>How do I debug uncaught exceptions?</b><br>
	      There is a mechanism to have a core dumped if an uncaught
	      exception occurs.
	      <br>
	      To enable it, the environment variable OPENMS_DUMP_CORE has
	      to be set.
	      <br>
	      Each time an uncaught exception occures, the OPENMS_DUMP_CORE
	      variable is checked and a segmentation fault is caused, if it
	      is set.
	
	
	    <li><b>Why is no core dumped, although a fatal error occured?</b><br>
	      Try the @a ulimit @a -c @a unlimited command. It sets the maximum
	      size of a core to unlimited.
	      <br>
	      <br>
	      <i>Note:</i> We observed that, on some systems, no core is
	      dumped even if the size of the core file is set to unlimited.
	      We are not sure what causes this problem.
	
	
	    <li><b>How can I set breakpoints in @a gdb to debug %OpenMS?</b><br>
	      Imagine you want to debug the @a TOPPView application and
	      you want it to stop at line 341 of @a SpectrumMDIWindow.C.
	      <br>
	      <ol>
	        <li>Run gdb:
	        <br>
	        <tt>shell&gt; gdb TOPPView</tt></li>
	
	
	        <li>Start the application (and close it):
	        <br>
	        <tt>gdb&gt; run [arguments]</tt></li>
	
	
	        <li>Set the breakpoint:
	        <br>
	        <tt>gdb&gt; break SpectrumMDIWindow.C:341</tt></li>
	
	
	        <li>Start the application again (with the same arguments):
	        <br>
	        <tt>gdb&gt; run</tt></li>
	      </ol>
		
				<LI><B>How can I find out which shared libraries are used by an application?</B>
				<BR>
				ldd &lt;application&gt;
				
				<LI><B>How can I get a list of the symbols defined in a (shared) library or object file?</B>
				<BR>
				<code>nm &lt;library&gt;</code>
				<BR>
				Use <code>nm -C</code> to switch on demangling of low-level symbols into their C++-equivalent names.
				<code>nm</code> also accepts <code>.a</code> and <code>.o</code> files.
		</UL>


	<H2 style="border-top:2px solid grey;">SVN</H2>
		<UL>
	    <li><b>The $id$ string in my test is not expanded to the SVN id. Why?</b><br>
	      In Subversion you have to set the keyword expansion expilcitly:<BR>
	      <tt>svn propset svn:keywords Id &lt;file&gt;</tt>
	
	    <li><b>How do I create a branch?</b><br>
	      <tt>svn copy https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS \\<BR> https://open-ms.svn.sourceforge.net/svnroot/open-ms/branches/&lt;name&gt;/</tt>
			
			 <li><b>How do I merge the changes i made to the HEAD into the release branch?</b><br>
			  Suppose you want to merge the changes you made in revision 2325 of the HEAD (/OpenMS) into the current
			  revision of the release branch for Release 1.0 (/branches/Releases1.0).
			  <OL>
			  	<LI> Check out the release branch:<BR>
			  			 <tt>svn co https://open-ms.svn.sourceforge.net/svnroot/open-ms/branches/Release1.0/</tt>
			  	<LI> Merge the changes into the the branch:<BR>
			  			 <tt>svn merge -r 2324:2325 https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS/</tt>
			  	<LI> Resolve conflicts and make sure all tests run
			  	<LI> Commit the changes
			  </OL>
	
	 		<li><b>How do I merge a branch into the trunk?</b><br>
	 			Imagine the current revision is 25 and you added the branch in revision 10.
	 			<OL>
	 				<LI>Merge the changes in the trunk since the branching into the branch:<BR>
	 					<tt>cd OpenMS/</tt> (branch)<BR>
	      		<tt>svn merge -r11:25 https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS</tt>
	 				<LI>Commit the changes into the branch:<BR>
	 					<tt>svn commit -m 'merged -r11:25 of trunk into branch'</tt>
					<LI>Merge the branch into the trunk:<BR>
						<tt>cd OpenMS/</tt> (trunk)<BR>
	      		<tt>svn merge https://open-ms.svn.sourceforge.net/svnroot/open-ms/OpenMS \\<BR> https://open-ms.svn.sourceforge.net/svnroot/open-ms/branches/&lt;name&gt;/OpenMS/</tt>
				</OL>
		</UL>

	<H2 style="border-top:2px solid grey;">Releases</H2>
		<UL>
				<LI><B>How is an new release created?</B>
				<OL>
					<LI> Prepare the release file (doc):
						<OL>
							<LI> Check out the release and build the library
							<LI> execute @a make @a doc @a TOPP_tutorial @a OpenMS_tutorial
							<LI> Create an archive @a OpenMS_doc-&lt;version&gt;.tar.gz which contains the following files only
								<UL>
									<LI> OpenMS_doc-&lt;version&gt;
									<UL>
										<LI> index.html
										<LI> html (including content)
										<LI> OpenMS_tutorial.pdf
										<LI> TOPP_tutorial.pdf
										<LI> doxygen
											<UL>
												<LI> html_output (including content)
											</UL>
									</UL> 
								</UL>
							<LI> Make sure that the Parameter documentation was created and that the includes are correct.
							<LI> Make sure that the tutorial examples work.
						</OL>
					<LI> Prepare the release file (%OpenMS):
						<OL>
							<LI> Update Version number in <tt>source/configure.ac</tt> (AC_INIT macro)
							<LI> Run autoconf
							<LI> SVN commit
							<LI> Run the script <tt>source/config/tools/make_dist.sh</tt>
						</OL>
					<LI> Prepare the release file (contrib):
						<OL>
							<LI> Update Version number in <tt>configure.ac</tt> (AC_INIT macro)
							<LI> Run the script <tt>source/config/tools/make_dist_contrib.sh</tt>
						</OL>
					<LI> FTP to upload.sourceforge.net (see http://sourceforge.net/docman/display_doc.php?docid=6445&group_id=1#howtoupload)
					<LI> Login as @a anonymous
					<LI> Use your e-mail address as the password for this login
					<LI> Set your client to binary mode (@a bin on command-line clients)
					<LI> Change your current directory to /incoming (@a cd @a /incoming)
					<LI> Upload the desired tarball file for the release (@a put @a filename)
					<LI> Login in the @a Admin section on http://sourceforge.net/project/showfiles.php?group_id=90558
					<LI> Go to @a File @a Releases
					<LI> Now you can add your release
					<LI> Go to @a Edit @a Releases to change the status of the old release to @a hidden 
					<LI> Update the online documentation of %OpenMS:
						<OL>
							<LI> Copy the documentation of the release to @a /share/www/ApacheRoot/html/extern/OpenMS-release.
							     <BR> <b>Note: </b> Do not forget to execute @a make @a distclean and @a configure.
						</OL>

				</OL>
	
			<LI><B>What has each developer to do for a release?</B>
			
				<p>
				Each maintainer must check his/her classes and TOPP tools.
				Keep in mind that missing documenation scares off potential users!
				<p>
				Here is a list of what is to do: 
				<OL>
					<LI> Correct errors found by @a source/config/tools/checker.php.
						<UL>
							<LI> The option @a -u restricts the output to one maintainer
							<LI> More options are given with @a --help
							<LI> Send feedback concening the script to Marc
						</UL>
					<LI> Check the output of TOPP tests @a source/TEST/TOPP/&lt;TOPP-tool&gt;.output for debug output
					<LI> Documentation:
						<UL>
							<LI> %OpenMS
								<UL>
									<LI> Write / correct tutorial
									<LI> Write / correct tutorial class documentation
									<LI> Complete method documentation
								</UL>
							<LI> TOPP
								<UL>
									<LI> Write / correct tutorial
									<LI> Write / correct tutorial doxygen documentation
									<LI> Proof-read the output of @a &lt;TOPP-tool&gt; @a --help
									<LI> Check if all parameters and sections are documented (@a -write_ini and @a INIFileEditor).
								</UL>
						</UL>
					<LI> Remove classes not ready for release from the release branch.
					<LI> Check if all examples in @a OpenMS/source/EXAMPLES/ compile.
				</OL>


		</UL>
		
*/

/// @endcond
