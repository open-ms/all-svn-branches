/**
  
  @page external_code Programming with OpenMS
  
	@section development_external Compiling external code
	
	It is very easy to set up an environment to write your own programs using %OpenMS. Make sure you downloaded and installed the source package of %OpenMS/TOPP properly.
	Note that you cannot use an install and 'make install' to build a devel version of %OpenMS, it must be built in place.
	<br>
	<br>
	The example configuration file below can be found in @em OpenMS/share/OpenMS/examples/external_code.
	All important compiler settings and preprocessor definitions along with the %OpenMS library will
	be available to you.
	The most important variables are:
	<UL>
	<LI>OPENMS_INCLUDE_DIRS - all include directories containing OpenMS headers
	<LI>OPENMS_ADDCXX_FLAGS - preprocessor macros we require written as (-DMACRO1 -DMACRO2) etc
	<LI>OPENMS_DEFINITIONS - compiler flags (e.g. to disable certain compiler warnings)
	</UL>
	and the OpenMS target itself (which you can link against).
	<br>	
	The example that follows will be explained in details:

\include examples/external_code/CMakeLists.txt

	The command @em project defines the name of the project - the name is only of interest of you're working in an IDE or want to export this project's targets.
	To compile your program just append it to the @em my_executables list. If you use also object files (classes which do not contain a main program) this can be down by appending 
	to the @em my_sources list. In the next step CMake creates a statically linked library of the object files, listed in my_sources.
	This simple CMakeLists.txt example can be extended to also build shared libraries, include other external libraries and so on.
	For more information visit the website of cmake at cmake.org and consult the documentation.
	<br>
	<b>Have fun coding with %OpenMS!</b>

<HR> 

  @section development_qtcreator Using Qt Creator with OpenMS
  
  Tested with Ubuntu 9.10 / Qt Creator 1.3.1 / Qt 4.6 / OpenMS 1.7

  <H2>Path variables</H2>
  Qt Creator must access to OpenMS headers and lib.<br>
  In linux, you can add <path_to_OpenMS>/lib/, <path_to_OpenMS>/include/ and 
  <path_to_OpenMS>/contrib/include/ to the environment variable LD_LIBRARY_PATH. 
  Or you can link libOpenMS.so from <path_to_OpenMS>/lib in /usr/lib, <path_to_OpenMS>/include 
  to /usr/OpenMS/include and link <path_to_OpenMS>/contrib/include to /usr/OpenMS/contrib/inlcude.

  <H2>Download Qt SDK</H2>
  Find Qt in Google and go to Developer Zone -> Download the latest versions -> 
  LGPL -> Download Qt SDK for Windows/Linux/Mac and install.

  <H2>Create project</H2>
  Start Qt Creator and create new Qt graphic application.<br>
  Open *.pro file and add lines (and change <path_to_OpenMS>) :

  @code
  QT += opengl \
      sql \
      network
  OPENMSDIR = <path_to_OpenMS>
  INCLUDEPATH += $$OPENMSDIR/include \
      $$OPENMSDIR/contrib/include
  LIBS += -lOpenMS
  @endcode

  @note <i>QT</i> line add Qt options (opengl, sql and network), <i>INCLUDEPATH</i> 
  add paths to include dirs and <i>LIBS</i> add OpenMS lib (libOpenMS.so).
  
  You can now use OpenMS lib in your own programs !
  
  <H2>Progam example</H2>
  @code
  #include <QApplication>
  #include <OpenMS/KERNEL/MSExperiment.h>
  #include <OpenMS/VISUAL/Spectrum1DWidget.h>
  using namespace OpenMS;

  int main(int argc, char *argv[])
  {
      QApplication app(argc, argv);

      MSExperiment<> exp;
      Spectrum1DWidget* widget = new Spectrum1DWidget(Param());
      widget->show();

      return app.exec();
  }
  @endcode
  Compile and run with Ctrl+R.
  
*/
