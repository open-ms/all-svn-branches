FAQ todo:
	- What is CMake?!
		CMake builds BuildSystems for different platforms, e.g. VisualStudio Solutions on Windows, Makefiles on Linux etc.
		This allows us to define in one central location (namely CMakeLists.txt) how OpenMS is build and have the platform specific stuff handled by CMake.
		See http://www.cmake.org for more information.

	- How do I use CMake?!
		See Installation instructions for your platform.
		In general, you call CMake(.exe) with some parameters to create the native build-system. Afterwards you can (but usually don't have to
		edit the current configuration using a GUI named ccmake (or CMake-GUI in Windows), which ships with CMake).
		Note: whenever ccmake is mentionend in this document, substitute this by CMake-GUI if your OS is Windows.

	- What are user definable CMake Cache Variables?!
		They allow the user to pass options to CMake which will influence the build system.
		The most important option which should be given when calling CMake.exe is:
		- CUSTOM_CONTRIB_DIR, which is the path to the OpenMS contrib dir.
			The default for this variable <OpenMS>/contrib. So unless your contrib is at this location,
			you will need to set this variable.
		To pass this variable to CMake use the -D switch
		e.g. <code>cmake -D CUSTOM_CONTRIB_DIR:PATH="D:\svn\contrib"</code>
		Everything else can be edited using ccmake afterwards. The following options are of interest:
		- OPENMS_DEBUG
		- OPENMS_ENABLE_EXTERNALMEMORY
		- CF_DB_PLUGIN
		Their description will be displayed when you call ccmake.

	- How do I switch to debug/release configuration?!
		For Makefile generators (typically on Linux) you can set the CMAKE_BUILD_TYPE variable to either Debug or Release
		by calling ccmake. This only works AFTER you have called cmake.
		For Visual Studio, this is not necessary as all configurations are generated and
		you can choose the one you like within the IDE itself.

	- What does this OPENMS_DLLAPI in class headers do?!
		OPENMS_DLLAPI is a preprocessor macro and ensures that Visual Studio exports this class into the DLL when building the DLL
		or references the DLL when building an executable.

	- When do I use OPENMS_DLLAPI?!
		Whenever you've written a new OpenMS class, which is not a template class insert the macro into the header like this:
		class Myclass { ...
		becomes
		class OPENMS_DLLAPI Myclass { ...

	- CMake can't seem to find a Qt library (usually QtCore)! What now?
		Did you set the Environment Variable QTDIR correctly?!
		If the problem still persists: do you have a second installation of Qt (especially the MinGW version?)?
		This might lead CMake to the wrong path (it's searching for the Qt*.lib files).
		You should only move/delete the offending Qt version if you know what you are doing!
		A save workaround is to edit the CMakeCache file (e.g. via ccmake) and set all paths relating to QT (e.g. QT_LIBRARY_DIR) manually.

	- Does AndiMS work on 64bit systems?! Do I need to disable it?!
		-  AndiMS currently does not work on 64bit (we are planning a bugfix). CMake will *automatically* disable AndiMS on 64bit systems!

	- Shall I use VS2008 or VS2005?
		- Use VS2008 if you can. It it much more convenient when reloading your Solution-File (VS2005 will give you ~10e10 Messageboxes).
			This happens whenever the Build-System calls CMake (which can be whenever you do svn-update).


Build-System-Developer-FAQ:
	- CMake doesn't find a lib using find_library(VAR ...)!
		- make sure that the returning VAR is *not* initialized before (within a Message() or Set()) - otherwise find_library will just be skipped because it assumes that
			the lib is already found! The only way to force it to re-find the lib is to set the value of VAR to "${VAR}-NOTFOUND"
	- I'm getting Link-Errors like "could not find symbol xy in ..."
		- Make sure the Linker has all libraries it needs to resolve references and make sure they have the correct architecture (32/64bit).
			MSVC will *not* complain if its the wrong one. It will just not find the symbol. Even worse: the libraries usually have the same name.
		- Read the MSDN (Microsoft Developer Network) Article on the error you get (just google "MSDN <error number>")

	- How do I compile boost?!
		Open a VS Command line. Make sure bjam.exe is in your PATH. CD to <boost dir>.
		$ bjam --with-math address-model=64
		or (for 32bit systems)
		$bjam --with-math

Installation instructions (Windows)

	Notation of this tutorial:
		- whenever there is a $ this implies entering everything that follows the $ into a command line (usually the Visual Studio Command line)
		- a String in <> is something the user needs to choose e.g. <path_to_contrib> means that this string should be replaced by
			the path where the user put the OpenMS contrib package. Usually all commands where this is necessary come with examples, so don't worry.

	Pre-Requisites:
	- have a Visual Studio 2005/2008 installed (2003 is not supported, but might work, if you compile your own contrib)
	- have CMake 2.6 or greater installed (www.cmake.org)
	- if you work with the SVN version of OpenMS (instead of the Release package), we recommend downloading
	  the svn binaries (which contain svnversion.exe). TortoiseSVN is *not* enough!
	  You can find the binaries here: http://subversion.tigris.org
	  Make sure to add the location of svnversion.exe to your PATH (usually this is "C:\progam files\subversion\bin")


	Install dependencies:
	- QT (choose commercial or non-commercial - whatever is applicable to you: read more on the Trolltech website)
		- non-commercial:
			- download QT source (Qt for Open Source C++ development on Windows - http://trolltech.com/downloads/opensource/appdev/windows-cpp)
			- extract zip file
			- open a Visual Studio Command Line (use x64 version if you want 64bit apps!)
			- $ cd <path-to-qt>
			- $ configure.exe
			- $ nmake
			- now you should have Link-Libraries and DLL's (debug and release) in your <Qt>/lib directory
		- commercial:
			- we have no experience here, but it should be possible to get the DLL's and Link-Libraries here as well.

		- set the Environment Variable QTDIR to your QT-Directory
		- add the QT/bin (!) directory to your PATH Environment Variable

	- contrib
		- check out contrib or download from SF
		- make sure you check out the correct version (64 vs 32 bit), depending on what system you use!
		...
		- add the <contrib>/lib | <contrib>/win/lib[32|64|/ directory to your PATH Environment Variable

	OpenMS:
		- check out OpenMS or download from SF
		- create BuildSystem using CMake:
			- open a Visual Studio Command Line (use x64 version if you want 64bit apps!)
				- create a build directory for OpenMS
					-e.g. $ mkdir OpenMS_Win64
				- call CMake to create the BuildSystem there
					$ cd <path_to_OpenMS_build_directory>
						e.g. $ cd OpenMS_Win64
					$ cmake -D CUSTOM_CONTRIB_DIR:PATH="<path_to_contrib>" -G "<generator>" "<path_to_OpenMS>"
					The choice of <generator> is dependent on your system. Type $ cmake to see a list of available generators.
						e.g. $ cmake -D CUSTOM_CONTRIB_DIR:PATH="C:\svn\contrib" -G "Visual Studio 8 2005 Win64" "../OpenMS"



Allgemein:
- CMake muss man erneut ausführen wenn man eine Quelldatei hinzufügt
	--> sollte er allein mitbekommen, wenn man make aufruft (zu testen)
- niemals "\" in Pfadangaben innerhalb CmakeLists.txt benutzen! Cmake will Unix-style Pfade!



TODO:
- check Types.h. preprocessor macros!
- TOPPtests portieren!
- set svn:eol to native for all .c and .h files!


- done: update boost to 1.37
- contrib/lib dir && Qt/lib in VC library path eintragen (wie geht das mit CMAKE automatisch?) Tools -> Options -> Projects -> VC++ Directories
- boost.lib wird benötigt... von CGAL... argghh
-- download bjam (see boost/index.html for install instructions)
bjam variant=debug threading=multi link=static
bjam variant=release threading=multi link=static (??)



generate_source_files.bash:
	- in source/FORMAT:
		### include ANDIFile only if set as option
		if (USE_ANDIMS)
		  list(APPEND sources ANDIFile.C)
		endif()
	- in source/FORMAT/HANDLERS
		same with AndiHandler.C


additional lib dirs:
C:\Qt\4.3.4_vs\lib;C:\Dokumente und Einstellungen\admin\Desktop\OpenMSretreat2008\contrib_vs\merged\lib

linker-input on MSVC:

opengl32.lib

xerces-depdom_2D.lib

xerces-c_2D.lib

svm.obj

libgslcblas.dll.a

libgsl.dll.a

cgal-vc80-mt.lib

QtCore4.lib

QtGui4.lib

QtNetwork4.lib

QtOpenGL4.lib

QtSql4.lib

QtXml4.lib


CGAL:
-Windows installer enthält libs und VS80 project files
	- zum compilen von CGAL muss QTDIR als Env gesetzt sein

libsvm:
- enhält NMake file --> erzeugt svm.obj --> nach contrib/lib kopieren
command (im libsvm dir ausführen):nmake -f Makefile.win clean all
-- vorher #define INF (std::numeric_limits<double>::max())  in svm.cpp einfügen! (nur für release?)
	 extern "C" aus Header entfernt für Debug


GSL: beim compilen von OpenMS das Macro GSL_DLL setzen!
http://www.quantcode.com/modules/smartfaq/faq.php?faqid=33

Qt:
- wenn Qt installiert wird muss qmake im Pfad sein, sonst findet CMake Qt nicht
 -ABER: wenn es mehrere QT-versionen gibt (eine mit MinGW, eine mit VS compiled)
 				 falls QTCore nicht gefunden wird: Cache editieren und auf VS-QT pfad setzen!! PATH env hat anscheinend keine Wirkung!
 				 speziell: QT_LIBRARY_DIR, QT_INCLUDE_DIR, QT_DOC_DIR

from command.exe:
cmake -Wdev -D CUSTOM_CONTRIB_DIR:PATH="C:\svn\contrib\merged" -G "Visual Studio 9 2008 Win64" ../OpenMS_Retreat2008 

from command.exe:
cmake -Wdev -D CUSTOM_CONTRIB_DIR:PATH="D:\uni\OpenMS_Win\my\contrib" -G "MSYS Makefiles" ../OpenMS_Retreat2008 



Windows:
- TortoiseSVN reicht nicht aus wenn SVN-Revision bestimmt werden soll!
--> download svn binaries (enthält svnversion.exe)


Qt für VS2005 compilen:
- visual studio command line öffnen
- ins Qt Verzeichnis gehen
- configure
- nmake
- lange warten

-get preprocessor macros of GCC:
$ touch empty.c
$ gcc -v -dD -E empty.c 