// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// ==========================================================================
//
// IMPORTANT:
// This is config.h / config.h.in
// Please do ONLY change config.h.in, as config.h is automagically
// created by configure from config.h.in
// 
// Use appropriate options to configure instead of changing config.h.
// Changes made in config.h will be lost as soon as you call configure again.
//
// ==========================================================================
// 
// --------------------------------------------------------------------------
//                   OpenMS Mass Spectrometry Framework 
// --------------------------------------------------------------------------
//  Copyright (C) 2003-2007 -- Oliver Kohlbacher, Knut Reinert
//
//  This library is free software; you can redistribute it and/or
//  modify it under the terms of the GNU Lesser General Public
//  License as published by the Free Software Foundation; either
//  version 2.1 of the License, or (at your option) any later version.
//
//  This library is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public
//  License along with this library; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// --------------------------------------------------------------------------
// $Maintainer: Marc Sturm $
// --------------------------------------------------------------------------

#ifndef OPENMS_CONFIG_H
#define OPENMS_CONFIG_H

// Here are some global configuration flags for OpenMS

// OPENMS_DEBUG enables some debugging methods
// change the DEBUG entry in configure to define this flag.
// If in debug mode, inline functions won't be compiled
// as inline by defining OPENMS_NO_INLINE_FUNCTIONS
// This facilitates debugging, as the debugger can always
// find the corresponding source code line.
// See also COMMON/debug.h for these symbols.
#undef OPENMS_DEBUG
#undef OPENMS_NO_INLINE_FUNCTIONS

// The path to the directory where OpenMS is installed
#define OPENMS_PATH "OpenMS"
#define PACKAGE_VERSION "0.00"

// The string describing the binary format
#define OPENMS_BINFMT "(unknown)"

// Define architecture
#undef OPENMS_ARCH_SPARC
#undef OPENMS_ARCH_MIPS
#undef OPENMS_ARCH_I386
#undef OPENMS_ARCH_ALPHA
#undef OPENMS_ARCH_POWERPC

// Define OS
#undef OPENMS_OS_LINUX
#undef OPENMS_OS_SOLARIS
#undef OPENMS_OS_SUNOS
#undef OPENMS_OS_IRIX
#undef OPENMS_OS_IRIX32
#undef OPENMS_OS_IRIX64
#undef OPENMS_OS_FREEBSD
#undef OPENMS_OS_DARWIN

// Define compiler specifics (used in VERY few places only)
// Microsoft Visual Studio .NET
#undef OPENMS_COMPILER_MSVC
// GNU g++
#undef OPENMS_COMPILER_GXX
// Intel C++
#undef OPENMS_COMPILER_INTEL
// SGI MipsPro
#undef OPENMS_COMPILER_MIPSPRO
// SUN SunPro (Forte, Workshop)
#undef OPENMS_COMPILER_SUNPRO
// Compaq cxx
#undef OPENMS_COMPILER_COMPAQ
// Kuck & Associate (KAI) C++
#undef OPENMS_COMPILER_KAI

// The compiler name.
#define OPENMS_COMPILER "unknown"

// Defines for the compiler version (major.minor.minor_minor)
#define OPENMS_COMPILER_VERSION_MAJOR 0
#define OPENMS_COMPILER_VERSION_MINOR 0
#define OPENMS_COMPILER_VERSION_MINOR_MINOR 0

// define if gethostname is supported
#undef OPENMS_HAVE_GETHOSTNAME

// Define if sysinfo(SI_HOSTNAME,) has to be used instead of
// gethostname (older Solaris variants)
#undef OPENMS_HAVE_SYSINFO

// define if gethostname is not in the unistd.h header
#undef OPENMS_DEFINE_GETHOSTNAME

// Define if you have the inet_aton function.  
// Note: inet_aton is a marginally improved version of inet_addr
// If configure finds inet_aton, OPENMS_HAVE_INET_ATON is set and used.
#undef OPENMS_HAVE_INET_ATON

// Define the type needed for getsockname, getpeername, and accept
// This type is probably one of socklen_t, size_t, or int
// Refer to /usr/include/sys/socket.h in case of doubt
#define OPENMS_SOCKLEN_TYPE int

// Define some symbols for the (bit)size of some builtin types
#define OPENMS_INT_SIZE 32
#define OPENMS_CHAR_SIZE 32
#define OPENMS_LONG_SIZE 32
#define OPENMS_SIZE_T_SIZE 32
#define OPENMS_POINTER_SIZE 32

// Define symbols for the endianness of the system
#undef OPENMS_LITTLE_ENDIAN
#undef OPENMS_BIG_ENDIAN

// the signature of the function arguments used in xdrrec_create differs
// from platform to platform, so we define some symbols describing the
// correct arguments: (void*, char*, int), (char*, char*, int), or (void)
// take arguments of type (void*, char*, int)
#undef OPENMS_XDRREC_CREATE_VOID_CHAR_INT
#undef OPENMS_XDRREC_CREATE_CHAR_CHAR_INT
#undef OPENMS_XDRREC_CREATE_VOID

// Some platforms (e.g. Debian 2.1) do not provide xdr_u_hyper, so we 
// need a workaround for this
#undef OPENMS_HAS_XDR_U_HYPER 

// Define to `int' if <sys/types.h> doesn't define.  
#undef pid_t

// Define to `unsigned' if <sys/types.h> doesn't define.  
#undef size_t

// Define if you have the ANSI C header files.  
#undef STDC_HEADERS

// Define if numeric_limits is defined in <limits>
#undef OPENMS_HAS_NUMERIC_LIMITS

// Define the argument type for xdr_u_hyper (64 bit)
#define OPENMS_XDR_UINT64_TYPE u_quad_t

// Define on 64 bit architectures to avoid the use of long long
// which is required on 32 bit machines for comatibility
#undef OPENMS_64BIT_ARCHITECTURE

// Define a signed/unsigned numeric type of 64 bit length (used for
// platform independent persistence: stores pointers)
// this usually defaults to unsigned long on 64 bit architectures
// and unsigned long long on 32 bit machines
#define OPENMS_ULONG64_TYPE ""
#define OPENMS_LONG64_TYPE ""

// Defines an unsigned type that has the same length as size_t
#define OPENMS_SIZE_TYPE int

// Defines a signed type that has the same length as size_t
#define OPENMS_INDEX_TYPE int

// Defines an unsigned integer type of the same size as void*
#define OPENMS_POINTERSIZEINT_TYPE int

// Defines an unsigned integer type of the same size as void*
#define OPENMS_POINTERSIZEUINT_TYPE unsigned int

// Define the template argument for friends of template classes:
// either "" or "<>"
#define OPENMS_NULL_TEMPLATE_ARGS ""

// Basically a work-around for the broken SUNPro CC (WS 6U2),
// which handles function template incorrectly -- see amberNonBonded.C
#undef OPENMS_MUST_CAST_TEMPLATE_FUNCTION_ARGS

// Define whether the compiler provides an ANSI-compliant implementation
// of <iostream>. This is required in COMMON/socket.h/C since we need
// the correct initialisation of the base classes. These base classes are
// either something like std::basic_ios<char> etc., or ios, istream etc.
#undef OPENMS_HAS_ANSI_IOSTREAM

// Define whether we can use <sstream> or whether we have to use the
// older <strstream>
#undef OPENMS_HAS_SSTREAM

// Define whether inline functions may be used as template parameters.
#undef OPENMS_HAS_INLINE_TPL_ARGS

// Define the precision for the OPENMS Complex type (has to be consistent
// with the FFTW precision, if included).
#define OPENMS_COMPLEX_PRECISION float

// Define whether the FFTW library/header is available.
#undef OPENMS_HAS_FFTW
#undef OPENMS_HAS_FFTW_DOUBLE
#undef OPENMS_HAS_FFTW_FLOAT
#undef OPENMS_HAS_FFTW_LONG_DOUBLE
#undef OPENMS_HAS_FFTW_H

// Define whether the CGAL library/header is available.
#undef OPENMS_HAS_CGAL

// Define whether to use the ARM style or ANSI style access modifications
//   ARM style:   BaseClass::foo;
//   ANSI style:  using BaseClass::foo;
#undef OPENMS_CFG_USING_METHOD_DIRECTIVE

// Define for activated PYTHON support
#undef OPENMS_PYTHON_SUPPORT

// Maximum line length for reading from files (see source/FORMAT)
#define OPENMS_MAX_LINE_LENGTH 65535

// On some systems (e.g. Solaris) we need to include /usr/include/ieeefp.h
// for some floating point functions
#undef OPENMS_HAS_IEEEFP_H

// On some systems (e.g. Solaris) we need to include /usr/include/values.h
// for some floating point functions
#undef OPENMS_HAS_VALUES_H

// On some systems, we do not have regex.h, so we have to use regexp.h
#undef OPENMS_HAS_REGEXP_H
#undef OPENMS_HAS_REGEX_H

// Define whether float.h has to be included along with limits.h
#undef OPENMS_HAS_FLOAT_H 

#undef OPENMS_HAS_UNISTD_H
#undef OPENMS_HAS_PROCESS_H
#undef OPENMS_HAS_TIME_H
#undef OPENMS_HAS_LIMITS_H
#undef OPENMS_HAS_FLOAT_H
#undef OPENMS_HAS_DIRENT_H
#undef OPENMS_HAS_DIRECT_H
#undef OPENMS_HAS_PWD_H
#undef OPENMS_HAS_SYS_IOCTL_H
#undef OPENMS_HAS_SYS_TIME_H
#undef OPENMS_HAS_SYS_STAT_H
#undef OPENMS_HAS_SYS_TIMES_H
#undef OPENMS_HAS_SYS_TYPES_H
#undef OPENMS_HAS_SYS_PARAM_H
#undef OPENMS_HAS_SYS_SOCKET_H

#undef OPENMS_HAS_NETINET_IN_H
#undef OPENMS_HAS_NETDB_H
#undef OPENMS_HAS_ARPA_INET_H

#undef OPENMS_HAS_KILL
#undef OPENMS_HAS_SYSCONF


// Specific to the Windows port (and actually not used here,
// included for completeness, rather).
#undef OPENMS_HAS_CLOCKS_PER_SEC
#undef OPENMS_HAS_WINDOWS_PERFORMANCE_COUNTER
#undef OPENMS_USE_WINSOCK

// Defines for conditional compiles when Libs are missing
#undef ANDIMS_DEF
#undef FFTW_DEF
#undef LIBSVM_DEF
#undef NETCDF_DEF
#undef BOOST_DEF
#undef CGAL_DEF
#undef DB_DEF
#define DB_PLUGIN "(undefined)"

#define ENABLE_GUI 1

// __PRETTY_FUNCTION__ is a GNU G++ extension.  It is used in exceptions to indicate their origin.
#ifndef OPENMS_COMPILER_GXX 
#  define __PRETTY_FUNCTION__ "<unknown>"
#endif

#endif // OPENMS_CONFIG_H
